# =============================================================================
# NimsforestWork Test Suite - Essential Tests Only
# =============================================================================
#
# Simple test suite covering core functionality
#
# Usage:
#   make -f Makefile.test test         # Run all tests
#   make -f Makefile.test test-cleanup # Clean up test directories
#

# Test configuration
TEST_DIR := $(shell pwd)/tmp
NIMSFORESTWORK_PATH := $(shell pwd)

# Colors for output
GREEN := \033[0;32m
RED := \033[0;31m
BLUE := \033[0;34m
NC := \033[0m

.PHONY: test test-cleanup test-setup test-hello test-init test-workspace test-templates test-stamping test-simple-stamp

# Run all essential tests
test: test-setup test-hello test-init test-workspace test-templates
	@echo "=================================="
	@echo -e "$(GREEN)‚úì All essential tests passed$(NC)"
	@echo -e "$(BLUE)üéâ NimsforestWork is working correctly!$(NC)"

# Test environment setup
test-setup:
	@echo -e "$(BLUE)[INFO]$(NC) Setting up test environment..."
	@rm -rf $(TEST_DIR)
	@mkdir -p $(TEST_DIR)

# Test cleanup
test-cleanup:
	@echo -e "$(BLUE)[INFO]$(NC) Cleaning up test directories..."
	@rm -rf $(TEST_DIR)
	@echo -e "$(GREEN)[PASS]$(NC) Cleanup complete"

# Create simple mock workspace with repo in main/ folder
define create-mock-workspace
	@mkdir -p $(TEST_DIR)/$(1)-workspace/main
	@cd $(TEST_DIR)/$(1)-workspace/main && \
		git init --quiet && \
		git config user.name "Test User" && \
		git config user.email "test@example.com" && \
		echo "# $(1)" > README.md && \
		git add . && \
		git commit --quiet -m "Initial commit"
endef

# Test 1: Basic compatibility check
test-hello:
	@echo -e "$(BLUE)[INFO]$(NC) Testing basic functionality..."
	@$(call create-mock-repo,test-hello)
	@cd $(TEST_DIR)/test-hello && \
		mkdir -p tools && \
		cp -r $(NIMSFORESTWORK_PATH) tools/nimsforestwork && \
		rm -rf tools/nimsforestwork/.git && \
		make -f tools/nimsforestwork/MAKEFILE.nimsforestwork nimsforestwork-hello >/dev/null 2>&1 && \
		echo -e "$(GREEN)[PASS]$(NC) Basic functionality works" || \
		(echo -e "$(RED)[FAIL]$(NC) Basic functionality failed" && exit 1)

# Test 2: Traditional initialization
test-init:
	@echo -e "$(BLUE)[INFO]$(NC) Testing project initialization..."
	@$(call create-mock-repo,test-init)
	@cd $(TEST_DIR)/test-init && \
		mkdir -p tools && \
		cp -r $(NIMSFORESTWORK_PATH) tools/nimsforestwork && \
		rm -rf tools/nimsforestwork/.git && \
		make -f tools/nimsforestwork/MAKEFILE.nimsforestwork nimsforestwork-init >/dev/null 2>&1 && \
		test -d docs/work/proposals && \
		test -d docs/work/bugs && \
		echo -e "$(GREEN)[PASS]$(NC) Project initialization works" || \
		(echo -e "$(RED)[FAIL]$(NC) Project initialization failed" && exit 1)

# Test 3: Workspace setup
test-workspace:
	@echo -e "$(BLUE)[INFO]$(NC) Testing workspace setup..."
	@$(call create-mock-repo,test-workspace)
	@cd $(TEST_DIR)/test-workspace && \
		mkdir -p tools && \
		cp -r $(NIMSFORESTWORK_PATH) tools/nimsforestwork && \
		rm -rf tools/nimsforestwork/.git && \
		WORKSPACE_ROOT=$(TEST_DIR)/test-workspace-ws \
		make -f tools/nimsforestwork/MAKEFILE.nimsforestwork nimsforestwork-setup-workspace >/dev/null 2>&1 && \
		test -d $(TEST_DIR)/test-workspace-ws/main && \
		test -d $(TEST_DIR)/test-workspace-ws/work && \
		test -f $(TEST_DIR)/test-workspace-ws/Makefile && \
		echo -e "$(GREEN)[PASS]$(NC) Workspace setup works" || \
		(echo -e "$(RED)[FAIL]$(NC) Workspace setup failed" && exit 1)

# Test 4: Templates validation
test-templates:
	@echo -e "$(BLUE)[INFO]$(NC) Testing templates..."
	@$(call create-mock-repo,test-templates)
	@cd $(TEST_DIR)/test-templates && \
		mkdir -p tools && \
		cp -r $(NIMSFORESTWORK_PATH) tools/nimsforestwork && \
		rm -rf tools/nimsforestwork/.git && \
		make -f tools/nimsforestwork/MAKEFILE.nimsforestwork nimsforestwork-init >/dev/null 2>&1 && \
		test -f docs/work/proposals/template.md && \
		test -f docs/work/bugs/template.md && \
		test -f docs/work/changerequests/template.md && \
		test -f docs/work/improvedocumentation/template.md && \
		echo -e "$(GREEN)[PASS]$(NC) Templates work correctly" || \
		(echo -e "$(RED)[FAIL]$(NC) Templates failed" && exit 1)

# Test 5: Simple single-process stamping
test-simple-stamp:
	@echo -e "$(BLUE)[INFO]$(NC) Testing simple single-process stamping..."
	@$(call create-mock-workspace,test-simple-stamp)
	@cd $(TEST_DIR)/test-simple-stamp-workspace/main && \
		mkdir -p docs/work/issues/new docs/work/issues/stamped && \
		echo "# Test Issue 1" > docs/work/issues/new/testissue1.md && \
		echo "# Test Issue 2" > docs/work/issues/new/testissue2.md && \
		echo "# Test Issue 3" > docs/work/issues/new/testissue3.md && \
		git add . && git commit --quiet -m "Add test issues" && \
		git init --bare $(TEST_DIR)/test-simple-stamp-workspace-origin.git && \
		git remote add origin $(TEST_DIR)/test-simple-stamp-workspace-origin.git && \
		git push --quiet origin main && \
		cp $(NIMSFORESTWORK_PATH)/MAKEFILE.nimsforestwork . && \
		echo -e "$(BLUE)[INFO]$(NC) Running single stamping process on 3 issues..." && \
		START_TIME=$$(date +%s) && \
		make -f MAKEFILE.nimsforestwork nimsforestwork-stamp-work && \
		END_TIME=$$(date +%s) && \
		ELAPSED=$$((END_TIME - START_TIME)) && \
		STAMPED_COUNT=$$(find docs/work/issues/stamped -name '*.md' 2>/dev/null | wc -l) && \
		NEW_COUNT=$$(find docs/work/issues/new -name '*.md' ! -name 'template.md' 2>/dev/null | wc -l) && \
		echo "" && \
		echo -e "$(BLUE)üìä SIMPLE STAMP TEST RESULTS$(NC)" && \
		echo -e "$(BLUE)=============================$(NC)" && \
		echo -e "$(BLUE)‚è±Ô∏è  Processing time: $$ELAPSED seconds$(NC)" && \
		echo -e "$(BLUE)üìÅ Files stamped: $$STAMPED_COUNT$(NC)" && \
		echo -e "$(BLUE)üìÅ Files remaining: $$NEW_COUNT$(NC)" && \
		echo "" && \
		if [ $$STAMPED_COUNT -eq 3 ] && [ $$NEW_COUNT -eq 0 ]; then \
			echo -e "$(GREEN)[PASS]$(NC) ‚úÖ Perfect: All 3 files successfully stamped!" && \
			echo -e "$(GREEN)       Single-process stamping works correctly$(NC)" && \
			echo -e "$(GREEN)       Completed in $$ELAPSED seconds$(NC)"; \
		else \
			echo -e "$(RED)[FAIL]$(NC) ‚ùå Expected 3 stamped, 0 remaining" && \
			echo -e "$(RED)       Got $$STAMPED_COUNT stamped, $$NEW_COUNT remaining$(NC)" && \
			echo "" && \
			echo "Sample stamped files:"; find docs/work/issues/stamped -name '*.md' 2>/dev/null | head -5; \
			echo "Sample remaining files:"; find docs/work/issues/new -name '*.md' ! -name 'template.md' 2>/dev/null | head -5; \
			exit 1; \
		fi && \
		echo "" && \
		echo -e "$(BLUE)üîß GIT CLEANUP CHECK$(NC)" && \
		echo -e "$(BLUE)==================$(NC)" && \
		REMOTE_BRANCHES=$$(git branch -r | grep -E 'origin/stamp-' | wc -l) && \
		LOCAL_BRANCHES=$$(git branch | grep -E 'stamp-' | wc -l) && \
		echo -e "$(BLUE)üåø Remote branches left: $$REMOTE_BRANCHES$(NC)" && \
		echo -e "$(BLUE)üåø Local branches left: $$LOCAL_BRANCHES$(NC)" && \
		if [ $$REMOTE_BRANCHES -eq 0 ] && [ $$LOCAL_BRANCHES -eq 0 ]; then \
			echo -e "$(GREEN)‚úÖ Perfect cleanup: No branches left$(NC)"; \
		else \
			echo -e "$(RED)‚ùå Cleanup failed: Found leftover branches$(NC)" && \
			exit 1; \
		fi

# Test 6: Concurrent stamping race condition prevention
# Usage: make test-stamping ISSUES=500 PROCESSES=10
test-stamping:
	@ISSUES_COUNT=$${ISSUES:-100}; \
	PROCESSES_COUNT=$${PROCESSES:-5}; \
	echo -e "$(BLUE)[INFO]$(NC) Testing stamping race condition prevention..."; \
	echo -e "$(BLUE)[INFO]$(NC) Issues: $$ISSUES_COUNT, Processes: $$PROCESSES_COUNT"
	@echo -e "$(BLUE)[INFO]$(NC) Cleaning up previous test environment..."
	@rm -rf $(TEST_DIR)/test-stamping-workspace $(TEST_DIR)/test-stamping-workspace-origin.git
	@$(call create-mock-workspace,test-stamping)
	@ISSUES_COUNT=$${ISSUES:-100}; \
	PROCESSES_COUNT=$${PROCESSES:-5}; \
	cd $(TEST_DIR)/test-stamping-workspace/main && \
		mkdir -p tools/nimsforestwork docs/work/issues/new docs/work/issues/stamped && \
		cp $(NIMSFORESTWORK_PATH)/MAKEFILE.nimsforestwork tools/nimsforestwork/ && \
		for i in $$(seq 1 $$ISSUES_COUNT); do \
			echo "# Test Issue $$i" > "docs/work/issues/new/testissue$$i.md"; \
		done && \
		git add . && git commit --quiet -m "Add test issues" && \
		git init --bare $(TEST_DIR)/test-stamping-workspace-origin.git && \
		git remote add origin $(TEST_DIR)/test-stamping-workspace-origin.git && \
		git push --quiet origin main && \
		echo -e "$(BLUE)[INFO]$(NC) Running $$PROCESSES_COUNT concurrent stamping processes on $$ISSUES_COUNT issues..." && \
		echo -e "$(BLUE)[INFO]$(NC) The atomic operation is 'git push origin stamp-filename' (not branch creation)" && \
		START_TIME=$$(date +%s) && \
		for p in $$(seq 1 $$PROCESSES_COUNT); do \
			( make -f tools/nimsforestwork/MAKEFILE.nimsforestwork nimsforestwork-stamp-issues & ); \
		done && \
		wait && \
		END_TIME=$$(date +%s) && \
		ELAPSED=$$((END_TIME - START_TIME)) && \
		ISSUES_COUNT=$${ISSUES:-100}; \
		sleep 1 && \
		cd $(TEST_DIR)/test-stamping-workspace/main && \
		STAMPED_COUNT=$$(find docs/work/issues/stamped -name '*.md' 2>/dev/null | wc -l) && \
		NEW_COUNT=$$(find docs/work/issues/new -name '*.md' ! -name 'template.md' 2>/dev/null | wc -l) && \
		SUCCESS_RATE=$$(echo "scale=1; $$STAMPED_COUNT * 100 / $$ISSUES_COUNT" | bc -l 2>/dev/null || echo "0") && \
		echo "" && \
		echo -e "$(BLUE)üìä PRIMARY TEST RESULTS$(NC)" && \
		echo -e "$(BLUE)=========================$(NC)" && \
		echo -e "$(BLUE)‚è±Ô∏è  Processing time: $$ELAPSED seconds$(NC)" && \
		echo -e "$(BLUE)üìÅ Total issues: $$ISSUES_COUNT$(NC)" && \
		echo -e "$(BLUE)üìÅ Files stamped: $$STAMPED_COUNT$(NC)" && \
		echo -e "$(BLUE)üìÅ Files remaining: $$NEW_COUNT$(NC)" && \
		echo -e "$(BLUE)üìà Success rate: $$SUCCESS_RATE%$(NC)" && \
		echo "" && \
		if [ $$STAMPED_COUNT -gt 0 ]; then \
			echo -e "$(GREEN)[PASS]$(NC) ‚úÖ Distributed stamping system functional"; \
			echo -e "$(GREEN)       Successfully stamped $$STAMPED_COUNT files$(NC)"; \
		else \
			echo -e "$(RED)[FAIL]$(NC) ‚ùå No files were stamped"; \
			echo -e "$(RED)       Check for timeout or configuration issues$(NC)"; \
			exit 1; \
		fi && \
		echo "" && \
		echo "" && \
		echo -e "$(BLUE)üîß POST-TEST VERIFICATION$(NC)" && \
		echo -e "$(BLUE)=======================$(NC)" && \
		FINAL_STAMPED_COUNT=$$(find docs/work/issues/stamped -name '*.md' 2>/dev/null | wc -l) && \
		FINAL_NEW_COUNT=$$(find docs/work/issues/new -name '*.md' ! -name 'template.md' 2>/dev/null | wc -l) && \
		echo -e "$(BLUE)üìÅ Files now in stamped/: $$FINAL_STAMPED_COUNT$(NC)" && \
		echo -e "$(BLUE)üìÅ Files still in new/: $$FINAL_NEW_COUNT$(NC)" && \
		if [ $$FINAL_STAMPED_COUNT -eq $$ISSUES_COUNT ] && [ $$FINAL_NEW_COUNT -eq 0 ]; then \
			echo -e "$(GREEN)‚úÖ Perfect processing: All $$ISSUES_COUNT files stamped!$(NC)"; \
		elif [ $$FINAL_STAMPED_COUNT -gt 0 ]; then \
			echo -e "$(GREEN)‚úì Partial success: $$FINAL_STAMPED_COUNT/$$ISSUES_COUNT files stamped$(NC)"; \
		else \
			echo -e "$(RED)‚ùå Processing failed: No files stamped$(NC)"; \
		fi && \
		echo -e "$(BLUE)üîç Recent git commits:$(NC)" && \
		git log --oneline -3 && \
		echo "" && \
		REMOTE_BRANCHES=$$(git branch -r | grep -E 'origin/stamp-' | wc -l) && \
		LOCAL_BRANCHES=$$(git branch | grep -E 'stamp-' | wc -l) && \
		echo -e "$(BLUE)üåø Remote branches left: $$REMOTE_BRANCHES$(NC)" && \
		echo -e "$(BLUE)üåø Local branches left: $$LOCAL_BRANCHES$(NC)" && \
		if [ $$REMOTE_BRANCHES -eq 0 ] && [ $$LOCAL_BRANCHES -eq 0 ]; then \
			echo -e "$(GREEN)‚úÖ Perfect git cleanup: No stale branches$(NC)"; \
		else \
			echo -e "$(BLUE)‚ÑπÔ∏è  Some branches remain - this is normal during concurrent operations$(NC)"; \
		fi