# =============================================================================
# NimsforestWork - Work Management System
# =============================================================================
# 
# This is a standalone Makefile for the nimsforestwork package.
# It can be included in any project's main Makefile using:
#   -include pkg/nimsforestwork/MAKEFILE.nimsforestwork
#
# Usage:
#   make nimsforestwork-addtomainmakefile PROJECTDIR=/path/to/project
#   make nimsforestwork-hello
#   make nimsforestwork-init  
#   make nimsforestwork-lint
#

.PHONY: nimsforestwork-help nimsforestwork-hello nimsforestwork-init nimsforestwork-lint nimsforestwork-newissue nimsforestwork-addtomainmakefile nimsforestwork-removefromainmakefile nimsforestwork-setup-workspace

# Show complete help and workflow guidance
nimsforestwork-help:
	@echo "üå≤ NimsforestWork - Nim-Based Work Management System"
	@echo "====================================================="
	@echo ""
	@echo "üìñ What is a Nim?"
	@echo "A Nim is an entity with agency, having MECE (Mutually Exclusive, Collectively"
	@echo "Exhaustive) roles and responsibilities within an organization - regardless of"
	@echo "whether executed by humans, AI agents, robots, or drones."
	@echo ""
	@echo "üöÄ Quick Start Workflow:"
	@echo ""
	@echo "1. üîç Check Compatibility:"
	@echo "   make -f MAKEFILE.nimsforestwork nimsforestwork-hello"
	@echo ""
	@echo "2. üîß Integrate with Project (if needed):"
	@echo "   make -f MAKEFILE.nimsforestwork nimsforestwork-addtomainmakefile"
	@echo "   (This adds nimsforestwork commands to your main Makefile)"
	@echo ""
	@echo "3. üìÅ Initialize Work Structure:"
	@echo "   make nimsforestwork-init"
	@echo "   (Creates docs/work/ with enterprise workflow folders)"
	@echo ""
	@echo "4. üìù Create Issues:"
	@echo "   make nimsforestwork-newissue TITLE=mytask MESSAGE=\"description\""
	@echo ""
	@echo "5. üîÑ Move Through Workflow (using git mv):"
	@echo "   git mv docs/work/issues/new/mytask.md docs/work/issues/triaging/"
	@echo "   git mv docs/work/issues/triaging/mytask.md docs/work/newfeatures/next/"
	@echo "   git mv docs/work/newfeatures/next/mytask.md docs/work/newfeatures/readyforanalysis/"
	@echo "   # ... continue through: inanalysis ‚Üí readyfordevelopment ‚Üí indevelopment"
	@echo "   # ... ‚Üí readyfortesting ‚Üí intesting ‚Üí signedoff ‚Üí archive/production"
	@echo ""
	@echo "üå≥ Git Worktree Workflow for Distributed Nims:"
	@echo ""
	@echo "# Create feature branch workspace"
	@echo "git worktree add ../feature-auth feature-auth"
	@echo "cd ../feature-auth"
	@echo "# Multiple Nims can now collaborate in this isolated workspace"
	@echo "# Human Nims: Strategic decisions, approvals"
	@echo "# AI Agent Nims: Code generation, testing"
	@echo "# Robot Nims: Deployment, hardware integration"
	@echo ""
	@echo "üìã Available Commands:"
	@echo ""
	@echo "  nimsforestwork-help              - Show this help"
	@echo "  nimsforestwork-hello             - Check system compatibility"
	@echo "  nimsforestwork-addtomainmakefile - Integrate with project Makefile"
	@echo "  nimsforestwork-init              - Initialize work folder structure"
	@echo "  nimsforestwork-newissue          - Create new issue"
	@echo "  nimsforestwork-lint              - Validate all work items"
	@echo "  nimsforestwork-setup-workspace   - Transform repo into worktree workspace"
	@echo ""
	@echo "üìä Work Categories & States:"
	@echo ""
	@echo "Issues (Intake):     new ‚Üí triaging ‚Üí pending"
	@echo "Bugs:               next ‚Üí readyforanalysis ‚Üí inanalysis ‚Üí readyfordevelopment"
	@echo "                    ‚Üí indevelopment ‚Üí readyfortesting ‚Üí intesting ‚Üí signedoff"
	@echo "                    + pendingfeedback (exception state)"
	@echo "Change Requests:    Same as bugs"
	@echo "New Features:       Same as bugs (no pendingfeedback)"
	@echo "Documentation:      Same as bugs (no pendingfeedback)"
	@echo "Archive:            production | rejected"
	@echo ""
	@echo "ü§ñ For AI Agent Nims:"
	@echo "Tell your AI agent: 'Read NIMINSTRUCTIONS.md and follow those instructions'"
	@echo ""
	@echo "üë®‚Äçüíª For Human Nims:"
	@echo "Read NIMINSTRUCTIONS.md for complete workflow guidance"
	@echo ""
	@echo "üìñ For detailed workflow: Read docs/WORKFLOW.md"

# Check system compatibility for work management
nimsforestwork-hello:
	@echo "üå≤ NimsforestWork System Compatibility Check"
	@echo "============================================="
	@echo ""
	@echo "üîç Checking required tools..."
	@command -v git >/dev/null 2>&1 || (echo "‚ùå git not found - required for work management" && exit 1)
	@echo "‚úÖ git found: $$(git --version)"
	@echo ""
	@echo "üìÅ Checking repository status..."
	@git rev-parse --git-dir >/dev/null 2>&1 || (echo "‚ùå Not in a git repository" && exit 1)
	@echo "‚úÖ Git repository detected"
	@echo "   Branch: $$(git branch --show-current)"
	@echo "   Remote: $$(git remote get-url origin 2>/dev/null || echo 'none')"
	@echo ""
	@echo "üìã Checking project structure..."
	@if [ -f Makefile ]; then \
		echo "‚úÖ Makefile found"; \
		if grep -q "nimsforestwork" Makefile 2>/dev/null; then \
			echo "‚úÖ NimsforestWork already integrated"; \
		else \
			echo "‚ö†Ô∏è  NimsforestWork not integrated in Makefile"; \
			echo "   Run: make -f MAKEFILE.nimsforestwork nimsforestwork-addtomainmakefile"; \
		fi; \
	else \
		echo "‚ùå No Makefile found in project root"; \
		echo "   Create a Makefile first, then integrate nimsforestwork"; \
	fi
	@if [ -f .env ]; then \
		echo "‚úÖ .env file found"; \
	else \
		echo "‚ÑπÔ∏è  No .env file found (optional)"; \
	fi
	@echo ""
	@echo "üéØ System compatible with nimsforestwork!"
	@echo ""
	@if [ -f Makefile ] && grep -q "nimsforestwork" Makefile 2>/dev/null; then \
		echo "‚úÖ Ready to use! Next steps:"; \
		echo "  make nimsforestwork-init     - Initialize work folder structure"; \
		echo "  make nimsforestwork-newissue - Create a new work item"; \
		echo "  make nimsforestwork-lint     - Validate work items"; \
	else \
		echo "üîß Integration needed:"; \
		echo "  1. make -f MAKEFILE.nimsforestwork nimsforestwork-addtomainmakefile"; \
		echo "  2. make nimsforestwork-init"; \
		echo "  3. make nimsforestwork-newissue"; \
	fi

# Initialize work folder structure
nimsforestwork-init:
	@echo "üå≤ Initializing NimsforestWork folder structure..."
	@echo "=================================================="
	@echo ""
	@echo "üìÅ Creating work management folders in docs/work/..."
	@mkdir -p docs/work/issues/new docs/work/issues/triaging docs/work/issues/pending
	@mkdir -p docs/work/bugs/next docs/work/bugs/readyforanalysis docs/work/bugs/inanalysis docs/work/bugs/readyfordevelopment docs/work/bugs/indevelopment docs/work/bugs/readyfortesting docs/work/bugs/intesting docs/work/bugs/signedoff docs/work/bugs/pendingfeedback
	@mkdir -p docs/work/changerequests/next docs/work/changerequests/readyforanalysis docs/work/changerequests/inanalysis docs/work/changerequests/readyfordevelopment docs/work/changerequests/indevelopment docs/work/changerequests/readyfortesting docs/work/changerequests/intesting docs/work/changerequests/signedoff docs/work/changerequests/pendingfeedback
	@mkdir -p docs/work/newfeatures/next docs/work/newfeatures/readyforanalysis docs/work/newfeatures/inanalysis docs/work/newfeatures/readyfordevelopment docs/work/newfeatures/indevelopment docs/work/newfeatures/readyfortesting docs/work/newfeatures/intesting docs/work/newfeatures/signedoff
	@mkdir -p docs/work/improvedocumentation/next docs/work/improvedocumentation/readyforanalysis docs/work/improvedocumentation/inanalysis docs/work/improvedocumentation/readyfordevelopment docs/work/improvedocumentation/indevelopment docs/work/improvedocumentation/readyfortesting docs/work/improvedocumentation/intesting docs/work/improvedocumentation/signedoff
	@mkdir -p docs/work/archive/production docs/work/archive/rejected
	@echo "‚úÖ Work folders created"
	@echo ""
	@echo "üìù Creating templates..."
	@NIMSFORESTWORK_DIR=$$(find . -name "MAKEFILE.nimsforestwork" -exec dirname {} \; | head -1); \
	if [ ! -f docs/work/issues/template.md ]; then \
		cp $$NIMSFORESTWORK_DIR/templates/issue.md docs/work/issues/template.md; \
		echo "‚úÖ Issue template created"; \
	else \
		echo "‚ÑπÔ∏è  Issue template already exists"; \
	fi
	@NIMSFORESTWORK_DIR=$$(find . -name "MAKEFILE.nimsforestwork" -exec dirname {} \; | head -1); \
	if [ ! -f docs/work/newfeatures/template.md ]; then \
		cp $$NIMSFORESTWORK_DIR/templates/newfeature.md docs/work/newfeatures/template.md; \
		echo "‚úÖ New feature template created"; \
	else \
		echo "‚ÑπÔ∏è  New feature template already exists"; \
	fi
	@NIMSFORESTWORK_DIR=$$(find . -name "MAKEFILE.nimsforestwork" -exec dirname {} \; | head -1); \
	if [ ! -f docs/work/bugs/template.md ]; then \
		cp $$NIMSFORESTWORK_DIR/templates/bug.md docs/work/bugs/template.md; \
		echo "‚úÖ Bug template created"; \
	else \
		echo "‚ÑπÔ∏è  Bug template already exists"; \
	fi
	@NIMSFORESTWORK_DIR=$$(find . -name "MAKEFILE.nimsforestwork" -exec dirname {} \; | head -1); \
	if [ ! -f docs/work/changerequests/template.md ]; then \
		cp $$NIMSFORESTWORK_DIR/templates/changerequest.md docs/work/changerequests/template.md; \
		echo "‚úÖ Change request template created"; \
	else \
		echo "‚ÑπÔ∏è  Change request template already exists"; \
	fi
	@NIMSFORESTWORK_DIR=$$(find . -name "MAKEFILE.nimsforestwork" -exec dirname {} \; | head -1); \
	if [ ! -f docs/work/improvedocumentation/template.md ]; then \
		cp $$NIMSFORESTWORK_DIR/templates/improvedocumentation.md docs/work/improvedocumentation/template.md; \
		echo "‚úÖ Documentation template created"; \
	else \
		echo "‚ÑπÔ∏è  Documentation template already exists"; \
	fi
	@echo ""
	@echo "üìñ Creating README..."
	@NIMSFORESTWORK_DIR=$$(find . -name "MAKEFILE.nimsforestwork" -exec dirname {} \; | head -1); \
	if [ ! -f docs/work/README.md ]; then \
		cp $$NIMSFORESTWORK_DIR/README.md docs/work/README.md; \
		echo "‚úÖ README.md created"; \
	else \
		echo "‚ÑπÔ∏è  README.md already exists"; \
	fi
	@echo ""
	@echo "üéâ NimsforestWork initialization complete!"
	@echo ""
	@echo "üìñ Work items now visible in docs visualizer!"
	@echo ""
	@echo "Usage:"
	@echo "  1. Create work items in docs/work/{type}/new/"
	@echo "  2. Move through workflow states as you progress"
	@echo "  3. Every merge to main goes to production (Netflix model)"
	@echo "  4. Browse work items through docs visualizer"
	@echo ""
	@echo "Next: make nimsforestwork-newissue"

# Create a new work item with parameters
# Usage: make nimsforestwork-newissue TITLE=mytitle MESSAGE="my description"
nimsforestwork-newissue:
	@echo "üå≤ Create New Issue"
	@echo "==================="
	@echo ""
	@if [ ! -d docs/work ]; then \
		echo "‚ùå docs/work/ folder not found. Run 'make nimsforestwork-init' first"; \
		exit 1; \
	fi
	@if [ -z "$(TITLE)" ]; then \
		echo "‚ùå TITLE parameter required"; \
		echo "Usage: make nimsforestwork-newissue TITLE=mytitle MESSAGE='my description'"; \
		exit 1; \
	fi
	@if [ -z "$(MESSAGE)" ]; then \
		echo "‚ùå MESSAGE parameter required"; \
		echo "Usage: make nimsforestwork-newissue TITLE=mytitle MESSAGE='my description'"; \
		exit 1; \
	fi
	@TYPE="issues"; \
	title="$(TITLE)"; \
	message="$(MESSAGE)"; \
	filename=$$(echo "$$title" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]//g'); \
	if [ -f "docs/work/$$TYPE/new/$$filename.md" ]; then \
		echo "‚ùå File docs/work/$$TYPE/new/$$filename.md already exists"; \
		exit 1; \
	fi; \
	echo "Creating issue: docs/work/$$TYPE/new/$$filename.md"; \
	cp "docs/work/$$TYPE/template.md" "docs/work/$$TYPE/new/$$filename.md"; \
	sed -i "s/# Issue Template/# $$title/" "docs/work/$$TYPE/new/$$filename.md"; \
	sed -i "s/Brief description of the issue or request/$$message/" "docs/work/$$TYPE/new/$$filename.md"; \
	echo "‚úÖ Issue created successfully!"; \
	echo ""; \
	echo "üìù File created at: docs/work/$$TYPE/new/$$filename.md"; \
	echo "üéØ Next: Edit the file to complete details, then commit to repository"

# Validate all work items
nimsforestwork-lint:
	@echo "üå≤ NimsforestWork Validation"
	@echo "============================"
	@echo ""
	@echo "üîç Checking work folder structure..."
	@if [ ! -d docs/work ]; then \
		echo "‚ùå docs/work/ folder not found. Run 'make nimsforestwork-init' first"; \
		exit 1; \
	fi
	@echo "‚úÖ Work folder structure valid"
	@echo ""
	@echo "üìù Validating work items..."
	@find docs/work -name '*.md' ! -name 'template.md' ! -name 'README.md' -exec sh -c 'echo "Validating: $$1"; head -1 "$$1" | grep -q "^#" || (echo "‚ùå File $$1 should start with markdown title"; exit 1)' _ {} \; && echo "‚úÖ All work items valid"
	@echo ""
	@echo "üìä Work item summary:"
	@echo "   Issues: $$(find docs/work/issues -name '*.md' ! -name 'template.md' 2>/dev/null | wc -l || echo 0)"
	@echo "   New Features: $$(find docs/work/newfeatures -name '*.md' ! -name 'template.md' 2>/dev/null | wc -l || echo 0)"
	@echo "   Bugs: $$(find docs/work/bugs -name '*.md' ! -name 'template.md' 2>/dev/null | wc -l || echo 0)"
	@echo "   Change Requests: $$(find docs/work/changerequests -name '*.md' ! -name 'template.md' 2>/dev/null | wc -l || echo 0)"
	@echo "   Documentation: $$(find docs/work/improvedocumentation -name '*.md' ! -name 'template.md' 2>/dev/null | wc -l || echo 0)"
	@echo "   Archived: $$(find docs/work/archive -name '*.md' 2>/dev/null | wc -l || echo 0)"
	@echo ""
	@echo "üìñ Browse work items in docs visualizer at docs/work/"
	@echo ""
	@echo "‚úÖ NimsforestWork validation complete!"

# Add this Makefile to the main project Makefile
nimsforestwork-addtomainmakefile:
	@echo "üå≤ Adding NimsforestWork to main Makefile..."
	@echo "============================================="
	@echo ""
	@# Use current directory if PROJECTDIR not set
	@PROJECTDIR_TO_USE=$${PROJECTDIR:-$(PWD)}; \
	if [ ! -f "$$PROJECTDIR_TO_USE/Makefile" ]; then \
		echo "‚ùå Makefile not found at $$PROJECTDIR_TO_USE/Makefile"; \
		exit 1; \
	fi; \
	echo "üìÅ Project directory: $$PROJECTDIR_TO_USE"; \
	echo "üìù Checking if already included..."; \
	if grep -q "MAKEFILE.nimsforestwork" "$$PROJECTDIR_TO_USE/Makefile"; then \
		echo "‚ÑπÔ∏è  NimsforestWork already included in main Makefile"; \
	else \
		echo "" >> "$$PROJECTDIR_TO_USE/Makefile"; \
		echo "# Include NimsforestWork commands" >> "$$PROJECTDIR_TO_USE/Makefile"; \
		echo "-include MAKEFILE.nimsforestwork" >> "$$PROJECTDIR_TO_USE/Makefile"; \
		echo "‚úÖ Added NimsforestWork include to main Makefile"; \
	fi; \
	echo ""; \
	echo "üéâ NimsforestWork integration complete!"; \
	echo ""; \
	echo "Available commands:"; \
	echo "  make nimsforestwork-hello  - Check system compatibility"; \
	echo "  make nimsforestwork-init   - Initialize work structure"; \
	echo "  make nimsforestwork-lint   - Validate work items"

# Remove this Makefile from the main project Makefile
nimsforestwork-removefromainmakefile:
	@echo "üå≤ Removing NimsforestWork from main Makefile..."
	@echo "==============================================="
	@echo ""
	@if [ -z "$(PROJECTDIR)" ]; then \
		echo "‚ùå PROJECTDIR environment variable not set"; \
		echo "Usage: make nimsforestwork-removefromainmakefile PROJECTDIR=/path/to/project"; \
		exit 1; \
	fi
	@if [ ! -f "$(PROJECTDIR)/Makefile" ]; then \
		echo "‚ùå Makefile not found at $(PROJECTDIR)/Makefile"; \
		exit 1; \
	fi
	@echo "üìÅ Project directory: $(PROJECTDIR)"
	@echo "üóëÔ∏è  Removing NimsforestWork includes..."
	@sed -i '/# Include NimsforestWork commands/d' "$(PROJECTDIR)/Makefile"
	@sed -i '/-include pkg\/nimsforestwork\/MAKEFILE.nimsforestwork/d' "$(PROJECTDIR)/Makefile"
	@echo "‚úÖ Removed NimsforestWork from main Makefile"
	@echo ""
	@echo "üéâ NimsforestWork removal complete!"

# Setup workspace structure for git worktrees and agents
nimsforestwork-setup-workspace:
	@echo "üå≤ Setting up NimsforestWork Workspace"
	@echo "======================================"
	@echo ""
	@# Check required environment variable
	@if [ -z "$(WORKSPACE_ROOT)" ]; then \
		echo "‚ùå WORKSPACE_ROOT environment variable not set"; \
		echo ""; \
		echo "Usage:"; \
		echo "  WORKSPACE_ROOT=/path/to/workspace make nimsforestwork-setup-workspace"; \
		echo ""; \
		echo "Example:"; \
		echo "  # From /home/user/myproject (current repo)"; \
		echo "  WORKSPACE_ROOT=/home/user/myproject-workspace make nimsforestwork-setup-workspace"; \
		echo ""; \
		exit 1; \
	fi
	@echo "üéØ Target workspace: $(WORKSPACE_ROOT)"
	@echo ""
	@# Detect current repository
	@if [ ! -d .git ]; then \
		echo "‚ùå Not in a git repository"; \
		echo "Run this command from the root of your git repository"; \
		exit 1; \
	fi
	@REPO_NAME=$$(basename "$$(pwd)"); \
	echo "üìÅ Current repository: $$REPO_NAME"; \
	echo ""
	@# Create workspace structure
	@REPO_NAME=$$(basename "$$(pwd)"); \
	WORKSPACE_DIR="$(WORKSPACE_ROOT)"; \
	echo "üì¶ Creating workspace structure..."; \
	mkdir -p "$$WORKSPACE_DIR"; \
	echo "‚úÖ Created workspace directory: $$WORKSPACE_DIR"; \
	echo ""
	@# Move current repo to main/
	@REPO_NAME=$$(basename "$$(pwd)"); \
	WORKSPACE_DIR="$(WORKSPACE_ROOT)"; \
	CURRENT_DIR="$$(pwd)"; \
	PARENT_DIR="$$(dirname "$$CURRENT_DIR")"; \
	echo "üîÑ Moving repository to workspace..."; \
	if [ -d "$$WORKSPACE_DIR/main" ]; then \
		echo "‚ùå $$WORKSPACE_DIR/main already exists"; \
		exit 1; \
	fi; \
	mv "$$CURRENT_DIR" "$$WORKSPACE_DIR/main"; \
	echo "‚úÖ Repository moved to: $$WORKSPACE_DIR/main"; \
	echo ""
	@# Copy nimsforestwork to tools/
	@WORKSPACE_DIR="$(WORKSPACE_ROOT)"; \
	echo "üîß Setting up nimsforestwork tools..."; \
	mkdir -p "$$WORKSPACE_DIR/tools"; \
	cp -r "$$WORKSPACE_DIR/main/tools/nimsforestwork" "$$WORKSPACE_DIR/tools/" 2>/dev/null || \
	cp -r . "$$WORKSPACE_DIR/tools/nimsforestwork"; \
	echo "‚úÖ NimsforestWork tools available at: $$WORKSPACE_DIR/tools/nimsforestwork"; \
	echo ""
	@# Initialize work structure
	@WORKSPACE_DIR="$(WORKSPACE_ROOT)"; \
	echo "üìù Initializing work management..."; \
	cd "$$WORKSPACE_DIR" && \
	mkdir -p work/proposals/new work/proposals/planned work/proposals/active work/proposals/ready work/proposals/archive && \
	mkdir -p work/bugs/new work/bugs/planned work/bugs/active work/bugs/pendingfeedback work/bugs/ready work/bugs/archive && \
	mkdir -p work/changerequests/new work/changerequests/planned work/changerequests/active work/changerequests/pendingfeedback work/changerequests/ready work/changerequests/archive && \
	mkdir -p work/improvedocumentation/new work/improvedocumentation/planned work/improvedocumentation/active work/improvedocumentation/ready work/improvedocumentation/archive; \
	echo "‚úÖ Work folders created"; \
	echo ""
	@# Copy templates
	@WORKSPACE_DIR="$(WORKSPACE_ROOT)"; \
	echo "üìÑ Setting up templates..."; \
	cd "$$WORKSPACE_DIR" && \
	cp tools/nimsforestwork/templates/proposal.md work/proposals/template.md && \
	cp tools/nimsforestwork/templates/bug.md work/bugs/template.md && \
	cp tools/nimsforestwork/templates/changerequest.md work/changerequests/template.md && \
	cp tools/nimsforestwork/templates/improvedocumentation.md work/improvedocumentation/template.md; \
	echo "‚úÖ Templates ready"; \
	echo ""
	@# Create workspace-specific agent instructions
	@WORKSPACE_DIR="$(WORKSPACE_ROOT)"; \
	REPO_NAME=$$(basename "$$WORKSPACE_DIR" | sed 's/-workspace$$//'); \
	echo "ü§ñ Creating agent instructions..."; \
	cd "$$WORKSPACE_DIR" && \
	sed "s|docs/work/|work/|g" tools/nimsforestwork/AGENTINSTRUCTIONS.md > AGENTINSTRUCTIONS.md && \
	echo "" >> AGENTINSTRUCTIONS.md && \
	echo "## Workspace-Specific Instructions" >> AGENTINSTRUCTIONS.md && \
	echo "" >> AGENTINSTRUCTIONS.md && \
	echo "This is a **$$REPO_NAME workspace** with git worktree support:" >> AGENTINSTRUCTIONS.md && \
	echo "" >> AGENTINSTRUCTIONS.md && \
	echo "- **main/**: Primary development branch" >> AGENTINSTRUCTIONS.md && \
	echo "- **work/**: Work management (use instead of docs/work/)" >> AGENTINSTRUCTIONS.md && \
	echo "- **Git worktrees**: Create with \`cd main && git worktree add ../feature-branch\`" >> AGENTINSTRUCTIONS.md && \
	echo "" >> AGENTINSTRUCTIONS.md && \
	echo "Available workspace commands:" >> AGENTINSTRUCTIONS.md && \
	echo "- \`make -f tools/nimsforestwork/MAKEFILE.nimsforestwork workspace-hello\`" >> AGENTINSTRUCTIONS.md && \
	echo "- \`make -f tools/nimsforestwork/MAKEFILE.nimsforestwork workspace-newissue\`" >> AGENTINSTRUCTIONS.md && \
	echo "- \`make -f tools/nimsforestwork/MAKEFILE.nimsforestwork workspace-lint\`" >> AGENTINSTRUCTIONS.md; \
	echo "‚úÖ Agent instructions created: AGENTINSTRUCTIONS.md"; \
	echo ""
	@# Create workspace Makefile
	@WORKSPACE_DIR="$(WORKSPACE_ROOT)"; \
	echo "‚öôÔ∏è  Creating workspace Makefile..."; \
	cd "$$WORKSPACE_DIR" && \
	echo "# Workspace Makefile for nimsforestwork" > Makefile && \
	echo "# Include nimsforestwork with workspace-friendly targets" >> Makefile && \
	echo "" >> Makefile && \
	echo "-include tools/nimsforestwork/MAKEFILE.nimsforestwork" >> Makefile && \
	echo "" >> Makefile && \
	echo "# Workspace-friendly aliases" >> Makefile && \
	echo "workspace-hello: nimsforestwork-hello" >> Makefile && \
	echo "workspace-newissue:" >> Makefile && \
	echo "	@cd main && make -f ../tools/nimsforestwork/MAKEFILE.nimsforestwork nimsforestwork-newissue" >> Makefile && \
	echo "workspace-lint:" >> Makefile && \
	echo "	@cd main && make -f ../tools/nimsforestwork/MAKEFILE.nimsforestwork nimsforestwork-lint" >> Makefile; \
	echo "‚úÖ Workspace Makefile created"; \
	echo ""
	@# Final success message
	@WORKSPACE_DIR="$(WORKSPACE_ROOT)"; \
	REPO_NAME=$$(basename "$$WORKSPACE_DIR" | sed 's/-workspace$$//'); \
	echo "üéâ Workspace setup complete!"; \
	echo ""; \
	echo "üìç Your new workspace structure:"; \
	echo "   $$WORKSPACE_DIR/"; \
	echo "   ‚îú‚îÄ‚îÄ main/                    # Your $$REPO_NAME repository"; \
	echo "   ‚îú‚îÄ‚îÄ tools/nimsforestwork/    # Work management tools"; \
	echo "   ‚îú‚îÄ‚îÄ work/                    # Work items and templates"; \
	echo "   ‚îú‚îÄ‚îÄ AGENTINSTRUCTIONS.md     # Instructions for AI agents"; \
	echo "   ‚îî‚îÄ‚îÄ Makefile                 # Workspace commands"; \
	echo ""; \
	echo "üöÄ Next steps:"; \
	echo "   cd $$WORKSPACE_DIR"; \
	echo "   make workspace-hello         # Test the setup"; \
	echo "   make workspace-newissue      # Create your first work item"; \
	echo ""; \
	echo "üå≥ Git worktree ready:"; \
	echo "   cd $$WORKSPACE_DIR/main"; \
	echo "   git worktree add ../feature-branch origin/feature-branch"; \
	echo "   cd ../feature-branch         # Work in isolated branch"; \
	echo ""; \
	echo "ü§ñ Tell your AI agent:"; \
	echo "   'Read AGENTINSTRUCTIONS.md and follow those instructions'"; \
	echo ""